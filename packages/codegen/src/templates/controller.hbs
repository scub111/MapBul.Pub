import { Controller, Get, Param{{#if hasRequestImport}}, Request{{/if}}, UseInterceptors, Query, Put, Body, Post, Delete, UseGuards } from '@nestjs/common';
import { IController, IGetParams{{#if hasRequestImport}}, IRequest{{/if}} } from 'interfaces';
import { PageContent, {{interfaceName}}, IGetAllQuery } from '@mapbul-pub/types';
import { {{serviceName}} } from './{{service}}.service';
import { {{className}} } from './{{service}}.dto';
import { NotFoundInterceptor } from 'interceptors';
import { JwtAuthGuard } from '../auth';

@Controller('{{router}}')
export class {{controllerName}} implements IController<{{interfaceName}}> {
  constructor(private readonly service: {{serviceName}}) {}

  @Get()
  @UseInterceptors(NotFoundInterceptor)
  async getAll(@Query() query: IGetAllQuery): Promise<PageContent<{{interfaceName}}>> {
    return this.service.getAll(query);
  }

  @Post()
  @UseGuards(JwtAuthGuard)
  @UseInterceptors(NotFoundInterceptor)
  async postItem(@Body() body: {{className}}{{#if map.needRequest}}, @Request() req: IRequest{{/if}}): Promise<{{interfaceName}}> {
    return await this.service.postItem(body{{#if map.needRequest}}, req{{/if}});
  }

  @Get(':id')
  @UseInterceptors(NotFoundInterceptor)
  async getItem(@Param() params: IGetParams): Promise<{{interfaceName}}> {
    return await this.service.getItem(params.id);
  }

  @Put(':id')
  @UseGuards(JwtAuthGuard)
  @UseInterceptors(NotFoundInterceptor)
  async putItem(@Param('id') id: string, @Body() body: {{className}}{{#if map.needRequest}}, @Request() req: IRequest{{/if}}): Promise<{{interfaceName}}> {
    return await this.service.putItem(id, body{{#if map.needRequest}}, req{{/if}});
  }

  @Delete(':id')
  @UseGuards(JwtAuthGuard)
  @UseInterceptors(NotFoundInterceptor)
  async deleteItem(@Param('id') id: string): Promise<{{interfaceName}}> {
    return await this.service.deleteItem(id);
  }
}
