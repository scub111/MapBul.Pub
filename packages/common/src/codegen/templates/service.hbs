import * as mysql from 'mysql';
import * as util from 'util';
import { Injectable } from '@nestjs/common';
import { IService } from 'server/common/IService';
import { {{interfaceName}} } from 'server/articles/article.dto';
import { Connection } from 'mysql';
import { TID } from 'server/common/types';
import { serverConfig } from 'common/serverConfig';

@Injectable()
export class {{serviceName}}Service implements IService<{{interfaceName}}> {
  constructor() {
    this.connection = mysql.createConnection(serverConfig.dbConnection);
    this.query = util.promisify(this.connection.query).bind(this.connection);
  }

  connection: Connection;
  query: (expression: string) => Promise<any>;

  async getAll(): Promise<{{interfaceName}}[]> {
    const result = await this.query('SELECT id, title from article LIMIT 100');
    return result.map(
      (i: {{interfaceName}}) => ({ id: i.id, title: i.title } as {{interfaceName}}),
    );
  }

  postItem(item: {{interfaceName}}): {{interfaceName}} {
    throw new Error('Method not implemented.');
  }
  putAll(item: {{interfaceName}}): {{interfaceName}} {
    throw new Error('Method not implemented.');
  }
  deleteAll(): void {
    throw new Error('Method not implemented.');
  }
  getItem(id: TID): {{interfaceName}} {
    throw new Error('Method not implemented.');
  }
  putItem(id: TID): {{interfaceName}} {
    throw new Error('Method not implemented.');
  }
  deleteItem(id: TID): {{interfaceName}} {
    throw new Error('Method not implemented.');
  }
}
